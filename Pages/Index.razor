@page "/"
@using System.Diagnostics
@using ConwaysGameOfLifeBlazorWASM.Domain
@inject IJSRuntime Js

<div class="bg-light">
    <div class="d-flex justify-content-end">
        <div class="custom-control custom-switch bg-light  prevent-select">
            <input type="checkbox" class="custom-control-input" id="darkModeSwitch" @onclick="ToggleDarkMode">
            <label class="custom-control-label text-dark" for="darkModeSwitch">Dark Mode</label>
        </div>
    </div>
    <div style="display: table; margin: 0 auto; text-align: center">
        <div class="card bg-light mb-2">
            <div class="card-header">
                <h4 class="mt-2 text-dark">Conway's Game of Life</h4>
            </div>
            <div class="card-body">
                <div class="card-body d-flex justify-content-around bg-light m-0 p-1">
                    <div>
                        <h6 class="card-title text-dark">Population Count</h6>
                        <p class="card-text text-dark">@_populationCount</p>
                    </div>
                    <div>
                        <h6 class="card-title text-dark">Timer</h6>
                        <p class="card-text text-dark">@_timer.Elapsed.ToString(@"mm\:ss\.ff")</p>
                    </div>
                </div>
            </div>
        </div>
        <div class="d-flex">
            <div class="card bg-light">
                <div class="card-header">
                    <h6 class="text-dark">Oscillators</h6>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary btn-sm mr-1 ml-1">Blinker</button>
                </div>
            </div>
            <div id="gridWrapper" style="grid-template-rows: repeat(@Size, 1em); grid-template-columns: repeat(@Size, 1em);">
                @for (var i = 1; i <= Size; i++)
                {
                    for (var j = 1; j <= Size; j++)
                    {
                        var x = i - 1;
                        var y = j - 1;
                        if (_gameBoard.Cells[i - 1, j - 1])
                        {
                            <div style="grid-column: @i; grid-row: @j; background-color: #343a40!important" @onclick="_ => HandleClick(x, y)"></div>
                        }
                        else
                        {
                            <div style="grid-column: @i; grid-row: @j; background-color: #f8f9fa!important" @onclick="_ => HandleClick(x, y)"></div>
                        }
                    }
                }
            </div>
            <div class="card bg-light">
                <div class="card-header">
                    <h6 class="text-dark">Spaceships</h6>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary btn-sm mr-1 ml-1">Click</button>
                </div>
            </div>
        </div>

        <div class="d-flex justify-content-center">
            <button class="btn btn-primary btn-sm mr-1 ml-1" disabled="@_isStarted" @onclick="Start">Start</button>
            <button class="btn btn-primary btn-sm mr-1 ml-1" disabled="@(_isStarted == false)" @onclick="Stop">Stop</button>
            <button class="btn btn-primary btn-sm mr-1 ml-1" disabled="@_isStarted" @onclick="RandomizeGameBoard">Go Random</button>
            <button class="btn btn-primary btn-sm mr-1 ml-1" @onclick="Reset">Reset</button>
        </div>
    </div>
</div>

@code {
        private const int Size = 40;
    private GameBoard _gameBoard;
    private bool _isStarted;
    private int _populationCount;
    private Stopwatch _timer;
    private string _template;

    private async Task ToggleDarkMode()
    {
        await Js.InvokeVoidAsync("toggleDarkMode");
    }

    private void SelectTemplatePattern(string templateName)
    {
        _template = templateName;
    }
    
    private void HandleClick(int x, int y)
    {
        if (_template is not null)
        {
            _gameBoard.ApplyTemplatePattern(_template, x, y);
        }
        
        ToggleCellState(x, y);
    }

    private void ToggleCellState(int x, int y)
    {
        var currentState = _gameBoard.Cells[x, y];
        _gameBoard.Cells[x, y] = !currentState;
    }

    private void RandomizeGameBoard()
    {
        _gameBoard.Randomize();
    }

    private async Task Start()
    {
        _isStarted = true;
        _timer.Start();
        _template = null;
        while (_isStarted)
        {
            await Task.Delay(50);
            _gameBoard.Update();
            _populationCount++;
            StateHasChanged();
            if (_gameBoard.IsNoCellAlive())
                Stop();
        }
    }

    private void Stop()
    {
        _isStarted = false;
        _timer.Stop();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _gameBoard = GameBoard.Create(Size, new bool[Size, Size]);
        _isStarted = false;
        _populationCount = 0;
        _timer = new Stopwatch();
    }

    private void Reset()
    {
        Stop();
        _populationCount = 0;
        _gameBoard.Reset();
    }

}